import {
  HttpClient,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse
} from '@angular/common/http'
import { Inject, Injectable, Optional } from '@angular/core'
import { Observable, of } from 'rxjs'

import { Configuration } from '../configuration'
import { CustomHttpUrlEncodingCodec } from '../encoder'
import { UserResponseDTO } from '../model/user-response-dto'
import { BASE_PATH } from '../variables'
import { DUMMY_USERS } from './../../mock/user'

/**
 * Mock API
 * Mock API
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

@Injectable({
  providedIn: 'root'
})
export class UserApi {
  protected basePath = 'http://localhost'
  public defaultHeaders = new HttpHeaders()
  public configuration = new Configuration()

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (configuration) {
      this.configuration = configuration
      this.configuration.basePath =
        configuration.basePath || basePath || this.basePath
    } else {
      this.configuration.basePath = basePath || this.basePath
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data'
    for (const consume of consumes) {
      if (form === consume) {
        return true
      }
    }
    return false
  }

  /**
   * find users
   *
   * @param from
   * @param to
   * @param userId
   * @param lastName
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public finfUsers(
    from: number,
    to: number,
    userId?: string,
    lastName?: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<UserResponseDTO>
  public finfUsers(
    from: number,
    to: number,
    userId?: string,
    lastName?: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<UserResponseDTO>>
  public finfUsers(
    from: number,
    to: number,
    userId?: string,
    lastName?: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<UserResponseDTO>>
  public finfUsers(
    from: number,
    to: number,
    userId?: string,
    lastName?: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (from === null || from === undefined) {
      throw new Error(
        'Required parameter from was null or undefined when calling finfUsers.'
      )
    }
    if (to === null || to === undefined) {
      throw new Error(
        'Required parameter to was null or undefined when calling finfUsers.'
      )
    }

    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec()
    })
    if (userId !== undefined && userId !== null) {
      queryParameters = queryParameters.set('userId', userId as any)
    }
    if (lastName !== undefined && lastName !== null) {
      queryParameters = queryParameters.set('lastName', lastName as any)
    }

    let headers = this.defaultHeaders

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json:']
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts)
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected)
    }

    // to determine the Content-Type header
    const consumes: string[] = []

    // tslint:disable-next-line: deprecation
    return of(DUMMY_USERS)
  }
}
